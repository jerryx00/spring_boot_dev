spring.application.name=SPRING-CLOUD-STUDY-DEMO
server.port=8082
spring.datasource.url=jdbc:mysql://127.0.0.1/test?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC&useSSL=true
spring.datasource.username=root
spring.datasource.password=pass
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.show-sql=true
spring.thymeleaf.cache=false
#spring.thymeleaf.cache=false
spring.mvc.view.prefix=/templates/
spring.mvc.view.suffix=.html
logging.file=./log/log.log
#是否开启 用户查询 定时器
scheduled.enable.user.query=false
#单位毫秒
#尝试注册时间间隔
jzt.patrol.register.timeinms=10000
#心跳时间间隔
jzt.patrol.heartbeat.timeinms=20000
jzt.patrol.heartbeat.cron=0 0/2 * * * ?
#最大尝试注册次数
jzt.patrol.register.maxtimes=50
#是否开启定时器
scheduled.enable=false
#是否向eurka注册
eureka.register.enabled=false
#只有开启向eurka注册,如下才生效
jzt.application.remote.ip=
jzt.application.remote.port=

# 下面是配置undertow作为服务器的参数
# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
server.undertow.io-threads=4
# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
# 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
server.undertow.worker-threads=20
# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
# 每块buffer的空间大小,越小的空间被利用越充分
server.undertow.buffer-size=1024
# 是否分配的直接内存
server.undertow.direct-buffers=true

